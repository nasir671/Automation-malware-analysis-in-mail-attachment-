import imaplib
import email
from email.header import decode_header
import os
import subprocess
import smtplib
from email.mime.text import MIMEText

# Email credentials and settings
EMAIL_USER = "your gmail"
EMAIL_PASS = "your app passcode"
IMAP_SERVER = "imap.gmail.com"
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 465
ATTACHMENT_DIR = "/path/to/save/attachments"
REPORT_PATH = "/path/to/save/report.txt"
RECIPIENT_EMAIL = "recipient-email@gmail.com"

def ensure_directory_exists(path):
    if not os.path.exists(path):
        try:
            os.makedirs(path)
        except PermissionError:
            print(f"Permission denied: Cannot create directory at {path}")
            raise

def connect_to_email():
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(EMAIL_USER, EMAIL_PASS)
    mail.select("inbox")
    return mail

def fetch_emails(mail):
    status, messages = mail.search(None, "ALL")
    email_ids = messages[0].split()
    return email_ids

def download_attachments(email_ids, mail):
    ensure_directory_exists(ATTACHMENT_DIR)
    for email_id in email_ids:
        status, msg_data = mail.fetch(email_id, "(RFC822)")
        for response_part in msg_data:
            if isinstance(response_part, tuple):
                msg = email.message_from_bytes(response_part[1])
                if msg.is_multipart():
                    for part in msg.walk():
                        if part.get_content_disposition() == "attachment":
                            filename = part.get_filename()
                            if filename:
                                filepath = os.path.join(ATTACHMENT_DIR, filename)
                                try:
                                    with open(filepath, "wb") as f:
                                        f.write(part.get_payload(decode=True))
                                    print(f"Downloaded: {filename}")
                                except PermissionError:
                                    print(f"Permission denied: Cannot write to {filepath}")
                                    raise

def scan_file_with_clamav(filepath):
    result = subprocess.run(["clamscan", filepath], capture_output=True, text=True)
    return result.stdout

def scan_attachments():
    ensure_directory_exists(os.path.dirname(REPORT_PATH))
    with open(REPORT_PATH, "w") as report_file:
        for filename in os.listdir(ATTACHMENT_DIR):
            file_path = os.path.join(ATTACHMENT_DIR, filename)
            scan_result = scan_file_with_clamav(file_path)
            report_file.write(f"Scan result for {filename}:\n{scan_result}\n")
            print(f"Scanned: {filename}")

def send_report():
    with open(REPORT_PATH, "r") as report_file:
        report_content = report_file.read()
    msg = MIMEText(report_content)
    msg["Subject"] = "Malware Scan Report"
    msg["From"] = EMAIL_USER
    msg["To"] = RECIPIENT_EMAIL
    try:
        server = smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT)
        server.login(EMAIL_USER, EMAIL_PASS)
        server.sendmail(EMAIL_USER, RECIPIENT_EMAIL, msg.as_string())
        server.quit()
        print("Report sent")
    except smtplib.SMTPException as e:
        print(f"Error sending email: {e}")
        raise

def main():
    mail = connect_to_email()
    email_ids = fetch_emails(mail)
    download_attachments(email_ids, mail)
    scan_attachments()
    send_report()

if __name__ == "__main__":
    main()
